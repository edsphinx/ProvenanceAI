// Provenance AI - Brain Canister Interface
//
// NOTE: This interface is designed to be extensible for multi-provider support (Phase 6)
// Future types for AIProvider, QualityLevel, etc. are commented below
// See: docs/architecture/MULTI_AI_PROVIDER_DESIGN.md

type CanisterConfig = record {
    deepseek_api_key: text;
    replicate_api_key: opt text;
    constellation_metagraph_url: text;

    // Phase 6: Additional API keys for multi-provider
    // openai_api_key: opt text;
    // anthropic_api_key: opt text;
    // dalle_api_key: opt text;
};

type IPMetadata = record {
    title: text;
    description: text;
    tags: vec text;
};

type GenerationInput = record {
    prompt: text;
    metadata: IPMetadata;

    // Phase 6: User preferences for multi-provider
    // ai_provider: opt AIProvider;      // If null, use Auto selection
    // quality_level: opt QualityLevel;  // If null, use Standard
    // max_cost_usd: opt float64;        // Cost ceiling
    // content_type: opt ContentType;    // Hint for provider selection
};

type GenerationOutput = record {
    image_url: text;
    content_hash: text;
    story_ip_id: text;
    constellation_tx_hash: text;
    ai_model_id: text;

    // Phase 6: Cost tracking & metadata
    // provider_used: AIProvider;        // Which provider was used
    // quality_level: QualityLevel;      // Quality setting used
    // generation_cost_usd: float64;     // Actual cost in USD
    // tokens_consumed: nat64;           // For subscription accounting
    // generation_time_ms: nat64;        // Performance metric
    // content_type: ContentType;        // Type of content generated
};

type Result = variant {
    Ok: GenerationOutput;
    Err: text;
};

service : (CanisterConfig) -> {
    // Main orchestration function
    generate_and_register_ip: (GenerationInput) -> (Result);

    // Configuration management
    is_configured: () -> (bool) query;
    update_config: (CanisterConfig) -> ();
    get_constellation_url: () -> (text) query;

    // EVM address for Story Protocol
    get_canister_evm_address: () -> (text);

    // Dispute handling
    raise_dispute: (text, text) -> (Result);

    // Phase 6: Additional functions for multi-provider
    // get_provider_status: (AIProvider) -> (ProviderStatus) query;
    // estimate_generation_cost: (GenerationInput) -> (CostEstimate) query;
    // get_user_subscription: (principal) -> (SubscriptionInfo) query;
    // purchase_tokens: (nat64) -> (TokenPurchaseResult);
}

// ==============================================================================
// Phase 6: Multi-Provider Type Definitions
// ==============================================================================
// Uncomment these types when implementing Phase 6
// See: docs/architecture/MULTI_AI_PROVIDER_DESIGN.md
//
// type AIProvider = variant {
//     DeepSeek;
//     OpenAI;
//     Anthropic;
//     Replicate;
//     DALLE;
//     Midjourney;
//     RunwayML;
//     Auto;
// };
//
// type QualityLevel = variant {
//     Draft;
//     Standard;
//     Premium;
//     Ultra;
// };
//
// type ContentType = variant {
//     Text;
//     Image;
//     Video;
//     Audio;
// };
//
// type SubscriptionTier = variant {
//     Free;
//     Pro;
//     Teams;
//     Enterprise;
// };
//
// type ProviderStatus = record {
//     provider: AIProvider;
//     is_available: bool;
//     latency_ms: opt nat64;
//     rate_limit_remaining: nat32;
//     cost_per_generation: float64;
// };
//
// type CostEstimate = record {
//     provider: AIProvider;
//     estimated_cost_usd: float64;
//     estimated_time_ms: nat64;
//     tokens_required: nat64;
// };
//
// type SubscriptionInfo = record {
//     tier: SubscriptionTier;
//     tokens_remaining: nat64;
//     generations_this_month: nat32;
//     renewal_date: nat64;
// };
//
// type TokenPurchaseResult = variant {
//     Ok: record {
//         tokens_purchased: nat64;
//         total_cost_usd: float64;
//         new_balance: nat64;
//     };
//     Err: text;
// };
